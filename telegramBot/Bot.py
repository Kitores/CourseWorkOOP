import asyncio
import json
import requests
import re
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from aiogram.fsm.state import State, StatesGroup  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = Bot(token='token')
dp = Dispatcher()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
MyID = ''

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–∞–π—Å –ª–∏—Å—Ç")],
        [KeyboardButton(text="–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –≤ –ø—Ä–∞–π—Å –ª–∏—Å—Ç–µ (—Å —ç–º–æ–¥–∑–∏)
price_list_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π ü§î")],
        [KeyboardButton(text="–Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏ üòé")],
        [KeyboardButton(text="–°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∏")],
        [KeyboardButton(text="–°—Ñ–µ—Ä–∞ –ª—é–±–≤–∏ ‚ù§Ô∏è")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É (–±–µ–∑ —ç–º–æ–¥–∑–∏)
booking_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π")],
        [KeyboardButton(text="–Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="–°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤")],
        [KeyboardButton(text="–°—Ñ–µ—Ä–∞ –ª—é–±–≤–∏")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
menu_button = KeyboardButton(text="–ú–µ–Ω—é")
menu_menu = ReplyKeyboardMarkup(
    keyboard=[[menu_button]],
    resize_keyboard=True
)

# –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥
services_info = {
    "–°—Ñ–µ—Ä–∞ –ª—é–±–≤–∏": (
        "–õ—é–±–æ–≤—å –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞, –Ω–æ –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –Ω–µ–π. –ê –∏–º–µ–Ω–Ω–æ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º:\n"
        "‚Ä¢ –ò—Å—Ç–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n"
        "‚Ä¢ –ö–∞–∫–∞—è –∂–µ–Ω–∞\n"
        "‚Ä¢ –ö–∞–∫–∞—è –ª—é–±–æ–≤–Ω–∏—Ü–∞\n"
        "‚Ä¢ –ö–∞–∫–æ–π –±—É–¥—É—â–∏–π –º—É–∂\n"
        "‚Ä¢ –ö–∞–∫–æ–π –ª—é–±–æ–≤–Ω–∏–∫\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ 5 –∏ 7 –¥–æ–º–∞"
    ),
    "–°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤": (
        "–õ—é–±–æ–π —á–µ–ª–æ–≤–µ–∫ –º–µ—á—Ç–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ–º—É –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ. –ù–æ –≥–¥–µ –∂–µ —ç—Ç–æ—Ç –∫–æ–º—Ñ–æ—Ä—Ç? –î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–≤–æ–µ–π '–∑–æ–ª–æ—Ç–æ–π –∂–∏–ª—ã', —è –æ—Ç–≤–µ—á—É –í–∞–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "‚Ä¢ –ë–ª–æ–∫–∏/—É—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å—Ç—Ä–∞—Ö–∏\n"
        "‚Ä¢ –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è\n"
        "‚Ä¢ –ù–∞–π–º/—Ñ—Ä–∏–ª–∞–Ω—Å/–±–∏–∑–Ω–µ—Å\n"
        "‚Ä¢ –¢—Ä–∞—Ç–∏—Ç—å –∏–ª–∏ –∫–æ–ø–∏—Ç—å\n"
        "‚Ä¢ –ö–∞–∫ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –¥–µ–Ω—å–≥–∞–º–∏\n"
        "‚Ä¢ –í–∞—à–∞ –Ω–∏—à–∞"
    ),
    "–Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏": (
        "–ò–Ω–æ–≥–¥–∞ –º—ã —Å–∞–º–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ–º, –∫—Ç–æ –º—ã. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —Ä–∞—Å–∫—Ä—ã–≤–∞—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã:\n"
        "‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ø\n"
        "‚Ä¢ –í–Ω–µ—à–Ω–µ–µ –Ø\n"
        "‚Ä¢ –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç"
    ),
    "–ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π": (
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–º –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π? –í —á–µ–º –º–æ–π —Ç–∞–ª–∞–Ω—Ç?\n"
        "‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–∏\n"
        "‚Ä¢ –ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã\n"
        "‚Ä¢ –¢–∞–ª–∞–Ω—Ç—ã\n"
        "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏"
    )
}

# –¶–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏
prices = {
    "–ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π ü§î": "300 —Ä.",
    "–Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏ üòé": "300 —Ä.",
    "–°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∏": "500 —Ä.",
    "–°—Ñ–µ—Ä–∞ –ª—é–±–≤–∏ ‚ù§Ô∏è": "500 —Ä."
}

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"  # –î–∞—Ç–∞: –î–î.–ú–ú.–ì–ì–ì–ì
time_pattern = r"^(?P<time>\d{2}:\d{2})\s+(?P<lastname>[–ê-–Ø–∞-—è–Å—ë]+)\s+(?P<firstname>[–ê-–Ø–∞-—è–Å—ë]+)\s+(?P<midname>[–ê-–Ø–∞-—è–Å—ë]+)$"  # –í—Ä–µ–º—è: –ß–ß:–ú–ú
menu_pattern = r"^–ú–µ–Ω—é$"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"

# –ú–∞—Å—Å–∏–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
available_times = ["12:00", "13:00", "16:00", "17:00"]

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
response_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–≤–µ—Ç")],
        [KeyboardButton(text="–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–¥–æ–ø–ª–∞—Ç–∞ 500 —Ä.)")]
    ],
    resize_keyboard=True
)

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É
class Form(StatesGroup):
    waiting_for_service = State()  # –ñ–¥—ë–º –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    waiting_for_details = State()  # –ñ–¥—ë–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    waiting_for_date = State()  # –ñ–¥—ë–º –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    waiting_for_time = State()  # –ñ–¥—ë–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –ù–µ–¥–∞–≤–Ω–æ —è –ø—Ä–æ—à–ª–∞ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ —Ç–µ–º —Å–∞–º—ã–º –æ—Å—É—â–µ—Å—Ç–≤–∏–ª–∞ —Å–≤–æ—é –∑–∞–≤–µ—Ç–Ω—É—é –º–µ—á—Ç—É!üåü\n"
        "–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–∑—É—á–∞–ª–∞ –ø–ª–∞–Ω–µ—Ç—ã –∏ –∏—Ö –∞—Å–ø–µ–∫—Ç—ã, –Ω–æ —Ç–∞–∫–∂–µ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞. –ú—ã –∏–∑—É—á–∞–ª–∏ —Å–µ–±—è –≤ –ø–ª–æ—Ç—å –¥–æ –ø—Å–∏—Ö–æ—Ç—Ä–∞–≤–º –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!\n"
        "–î–∞-–¥–∞, –≤–µ–¥—å –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤–µ–ª–∏–∫–æ, —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Å—É–¥—å–±—É!\n"
        "–Ø –∏–∑—É—á–∞–ª–∞ —Ç–∞–∫–∏–µ —Ç–µ–º—ã –∫–∞–∫:\n"
        "1) –ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã, –¥–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π ü§î\n"
        "2) –Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏ üòé\n"
        "3) –°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∏\n"
        "4) –°—Ñ–µ—Ä–∞ –ª—é–±–≤–∏ ‚ù§Ô∏è"
    )
    await message.reply(welcome_text, reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–∞–π—Å –ª–∏—Å—Ç"
@dp.message(F.text == "–ü—Ä–∞–π—Å –ª–∏—Å—Ç")
async def price_list(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω—ã:", reply_markup=price_list_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
@dp.message(F.text.in_(prices.keys()))
async def show_price(message: types.Message):
    service_name = message.text
    price = prices.get(service_name)
    await message.reply(f"–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: {price}", reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É"
@dp.message(F.text == "–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É")
async def service_booking(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=booking_menu)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    await Form.waiting_for_service.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É
@dp.message(F.text.in_(services_info.keys()))
async def show_service_details(message: types.Message, state: FSMContext):
    service_name = message.text
    info = services_info.get(service_name)
    await state.update_data(service_name=service_name)
    await message.reply(info, reply_markup=response_menu)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    await state.set_data(Form.waiting_for_details)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û—Ç–≤–µ—Ç" –∏–ª–∏ "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è"
@dp.message(F.text.in_(["–û—Ç–≤–µ—Ç", "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–¥–æ–ø–ª–∞—Ç–∞ 500 —Ä.)"]))
async def select_format(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–≤–µ—Ç":
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç *–û—Ç–≤–µ—Ç*. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –ú—ã –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞–±–æ—Ç–µ.", reply_markup=main_menu)

        # # # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

        # user_data = await state.get_data()
        # data = {
        #     'date': '0001-01-01T00:00:00Z',
        #     'firstName': str(message.from_user.full_name),
        #     'midName': str(message.from_user.username),
        #     'lastName': str(message.from_user.id),
        #     'service': user_data.get("service_name"),
        #     'online': False
        #     }
        # json_data = json.dumps(data)
        # header = {
        #     'Content-Type': 'application/json'
        # }
        # requests.post('http://localhost:8082/newAppointment', headers=header, data=json_data)

    elif message.text == "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–¥–æ–ø–ª–∞—Ç–∞ 500 —Ä.)":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç *–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é (—Ñ–æ—Ä–º–∞—Ç - –î–î.–ú–ú.–ì–ì–ì–ì).", reply_markup=menu_menu)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
        await state.set_state(Form.waiting_for_date)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã (–º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫ –¥–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì, —Ç–∞–∫ –∏ –≤—Ä–µ–º—è –ß–ß:–ú–ú)
@dp.message(F.text, Form.waiting_for_date)
async def handle_conference_date(message: types.Message, state: FSMContext):
    text = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
    if re.match(date_pattern, text):
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É
        date = text
        parsed_date = datetime.strptime(date, "%d.%m.%Y")
        formatted_date = parsed_date.strftime("%Y-%m-%d")
        print(f"–î–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {date}")

        data = {
            'date': f"{formatted_date}T00:00:00Z",
            'limUp': f"{formatted_date}T12:00:00Z",
            'limLow': f"{formatted_date}T18:00:00Z"
            }
        resp = {
            'times': [],
        }
        json_data = json.dumps(data)
        header = {
            'Content-Type': 'application/json'
        }
        response = requests.get('http://localhost:8082/checkDate', headers=header, data=json_data)

        respData = response.json().get('times')
        possible_times = ["12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"]
        times = ""
        timesList = []
        # for timestamp in respData:
        #     output += f"{timestamp}\n"
        print(respData)
        if respData == None:
            freeTimes = possible_times
            print(freeTimes)
        else:
            for timestamp in respData:
                time_part = timestamp.split('T')[1][:5]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ (—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã)
                timesList.append(time_part)
                times += time_part
                # times += f"{time_part}\n"

            freeTimes = possible_times
            print(times)
            for time in timesList:
                if time in possible_times:
                    freeTimes.remove(time)
            print(freeTimes)

        if len(freeTimes) != 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await state.update_data(date=date)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏
            time_options = "\n".join(freeTimes)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
            await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:\n{time_options}\n –∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–ß–ß:–ú–ú –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ\"", reply_markup=menu_menu)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            await state.set_state(Form.waiting_for_time)
        else:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–º–∏ –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç", reply_markup=menu_menu)

    elif re.match(menu_pattern, text):
        await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=menu_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä–µ–º—è –ß–ß:–ú–ú
@dp.message(F.text, Form.waiting_for_time)
async def handle_conference_time(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ß–ß:–ú–ú (–≤—Ä–µ–º—è)
    text = message.text.strip()
    match = re.match(time_pattern, message.text.strip())
    print(match)
    if match:
        time, lastname, firstname, midname = match.group('time', 'midname', 'firstname', 'lastname')
        print(time)
        print(lastname)
        print(firstname)
        print(midname)
        selected_time = time

        # print(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {selected_time}, {name}")s

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        date = user_data.get("date")
        parsed_date = datetime.strptime(date, "%d.%m.%Y")
        formatted_date = parsed_date.strftime("%Y-%m-%d")
        timeUTC = f"{formatted_date}T{time}:00Z"
        service_name = user_data.get("service_name")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã
        await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {selected_time} –Ω–∞ {date}. –ú—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º {firstname} {midname} {lastname}", reply_markup=menu_menu)

        data = {
            'date': timeUTC,
            'firstName': firstname,
            'midName': midname,
            'lastName': lastname,
            'service': service_name,
            'online': True
            }
        # resp = {
        #     'exists': '',
        # }
        json_data = json.dumps(data)
        # print(json_data)

        header = {
            'Content-Type': 'application/json'
        }
        response = requests.post('http://localhost:8082/newAppointment', headers=header, data=json_data)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        user_account_info = f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n" \
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n" \
                            f"Username: @{message.from_user.username}\n" \
                            f"ID: {message.from_user.id}\n" \
                            f"–£—Å–ª—É–≥–∞: {service_name}\n" \
                            f"–î–∞—Ç–∞: {date}\n" \
                            f"–í—Ä–µ–º—è: {selected_time}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(MyID, user_account_info)
        await state.clear()
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω
    elif re.match(menu_pattern, text):
        await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.", reply_markup=menu_menu)





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
@dp.message(F.text == "–ú–µ–Ω—é")
async def go_to_menu(message: types.Message):
    await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /appointments
@dp.message(Command("appointments"))
async def start_command(message: types.Message):

    data = {}
    json_data = json.dumps(data)
    header = {
        'Content-Type': 'application/json'
    }
    response = requests.get('http://localhost:8082/getAppointments', headers=header, data=json_data)

    respData = response.json().get('appointments')

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    results = []
    for user in respData:
        lines = []
        for key, value in user.items():
            lines.append(f'{key}: {value}')
        results.append('\n'.join(lines))

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '\n\n'
    final_result = '\n\n'.join(results)
    await bot.send_message(MyID, final_result)



async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
