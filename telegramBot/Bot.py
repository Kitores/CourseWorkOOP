import asyncio
import json
import requests
import re
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from aiogram.fsm.state import State, StatesGroup  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = Bot(token='')
dp = Dispatcher()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
MyID = ''

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–∞–π—Å –ª–∏—Å—Ç")],
        [KeyboardButton(text="–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –≤ –ø—Ä–∞–π—Å –ª–∏—Å—Ç–µ (—Å —ç–º–æ–¥–∑–∏)
price_list_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã, –¥–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π ü§î")],
        [KeyboardButton(text="–Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏ üòé")],
        [KeyboardButton(text="–°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∏")],
        [KeyboardButton(text="–°—Ñ–µ—Ä–∞ –ª—é–±–≤–∏ ‚ù§Ô∏è")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É (–±–µ–∑ —ç–º–æ–¥–∑–∏)
booking_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã, –¥–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π")],
        [KeyboardButton(text="–Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="–°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤")],
        [KeyboardButton(text="–°—Ñ–µ—Ä–∞ –ª—é–±–≤–∏")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
back_button = KeyboardButton(text="–ù–∞–∑–∞–¥")
back_menu = ReplyKeyboardMarkup(
    keyboard=[[back_button]],
    resize_keyboard=True
)

# –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥
services_info = {
    "–°—Ñ–µ—Ä–∞ –ª—é–±–≤–∏": (
        "–õ—é–±–æ–≤—å –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞, –Ω–æ –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –Ω–µ–π. –ê –∏–º–µ–Ω–Ω–æ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º:\n"
        "‚Ä¢ –ò—Å—Ç–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n"
        "‚Ä¢ –ö–∞–∫–∞—è –∂–µ–Ω–∞\n"
        "‚Ä¢ –ö–∞–∫–∞—è –ª—é–±–æ–≤–Ω–∏—Ü–∞\n"
        "‚Ä¢ –ö–∞–∫–æ–π –±—É–¥—É—â–∏–π –º—É–∂\n"
        "‚Ä¢ –ö–∞–∫–æ–π –ª—é–±–æ–≤–Ω–∏–∫\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ 5 –∏ 7 –¥–æ–º–∞"
    ),
    "–°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤": (
        "–õ—é–±–æ–π —á–µ–ª–æ–≤–µ–∫ –º–µ—á—Ç–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ–º—É –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ. –ù–æ –≥–¥–µ –∂–µ —ç—Ç–æ—Ç –∫–æ–º—Ñ–æ—Ä—Ç? –î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–≤–æ–µ–π '–∑–æ–ª–æ—Ç–æ–π –∂–∏–ª—ã', —è –æ—Ç–≤–µ—á—É –í–∞–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "‚Ä¢ –ë–ª–æ–∫–∏/—É—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å—Ç—Ä–∞—Ö–∏\n"
        "‚Ä¢ –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è\n"
        "‚Ä¢ –ù–∞–π–º/—Ñ—Ä–∏–ª–∞–Ω—Å/–±–∏–∑–Ω–µ—Å\n"
        "‚Ä¢ –¢—Ä–∞—Ç–∏—Ç—å –∏–ª–∏ –∫–æ–ø–∏—Ç—å\n"
        "‚Ä¢ –ö–∞–∫ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –¥–µ–Ω—å–≥–∞–º–∏\n"
        "‚Ä¢ –í–∞—à–∞ –Ω–∏—à–∞"
    ),
    "–Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏": (
        "–ò–Ω–æ–≥–¥–∞ –º—ã —Å–∞–º–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ–º, –∫—Ç–æ –º—ã. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —Ä–∞—Å–∫—Ä—ã–≤–∞—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã:\n"
        "‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ø\n"
        "‚Ä¢ –í–Ω–µ—à–Ω–µ–µ –Ø\n"
        "‚Ä¢ –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç"
    ),
    "–ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã, –¥–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π": (
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–º –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π? –í —á–µ–º –º–æ–π —Ç–∞–ª–∞–Ω—Ç?\n"
        "‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–∏\n"
        "‚Ä¢ –ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã\n"
        "‚Ä¢ –¢–∞–ª–∞–Ω—Ç—ã\n"
        "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏"
    )
}

# –¶–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏
prices = {
    "–ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã, –¥–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π ü§î": "300 —Ä.",
    "–Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏ üòé": "300 —Ä.",
    "–°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∏": "500 —Ä.",
    "–°—Ñ–µ—Ä–∞ –ª—é–±–≤–∏ ‚ù§Ô∏è": "500 —Ä."
}

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
birth_info_pattern = r"^(\d{2}:\d{2})\s+(\d{2}\.\d{2}\.\d{4})\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+)$"

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
response_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–≤–µ—Ç")],
        [KeyboardButton(text="–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–¥–æ–ø–ª–∞—Ç–∞ 500 —Ä.)")]
    ],
    resize_keyboard=True
)

# –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É
class Form(StatesGroup):
    waiting_for_service = State()  # –ñ–¥—ë–º –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    waiting_for_details = State()  # –ñ–¥—ë–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –ù–µ–¥–∞–≤–Ω–æ —è –ø—Ä–æ—à–ª–∞ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ —Ç–µ–º —Å–∞–º—ã–º –æ—Å—É—â–µ—Å—Ç–≤–∏–ª–∞ —Å–≤–æ—é –∑–∞–≤–µ—Ç–Ω—É—é –º–µ—á—Ç—É!üåü\n"
        "–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–∑—É—á–∞–ª–∞ –ø–ª–∞–Ω–µ—Ç—ã –∏ –∏—Ö –∞—Å–ø–µ–∫—Ç—ã, –Ω–æ —Ç–∞–∫–∂–µ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞. –ú—ã –∏–∑—É—á–∞–ª–∏ —Å–µ–±—è –≤ –ø–ª–æ—Ç—å –¥–æ –ø—Å–∏—Ö–æ—Ç—Ä–∞–≤–º –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!\n"
        "–î–∞-–¥–∞, –≤–µ–¥—å –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤–µ–ª–∏–∫–æ, —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Å—É–¥—å–±—É!\n"
        "–Ø –∏–∑—É—á–∞–ª–∞ —Ç–∞–∫–∏–µ —Ç–µ–º—ã –∫–∞–∫:\n"
        "1) –ü—Å–∏—Ö–æ—Ç—Ä–∞–≤–º—ã, –¥–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π ü§î\n"
        "2) –Ø–¥—Ä–æ –ª–∏—á–Ω–æ—Å—Ç–∏ üòé\n"
        "3) –°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∏\n"
        "4) –°—Ñ–µ—Ä–∞ –ª—é–±–≤–∏ ‚ù§Ô∏è"
    )
    await message.reply(welcome_text, reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–∞–π—Å –ª–∏—Å—Ç"
@dp.message(F.text == "–ü—Ä–∞–π—Å –ª–∏—Å—Ç")
async def price_list(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω—ã:", reply_markup=price_list_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
@dp.message(F.text.in_(prices.keys()))
async def show_price(message: types.Message):
    service_name = message.text
    price = prices.get(service_name)
    await message.reply(f"–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: {price}", reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É"
@dp.message(F.text == "–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É")
async def service_booking(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=booking_menu)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    await Form.waiting_for_service.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É
@dp.message(F.text.in_(services_info.keys()))
async def show_service_details(message: types.Message, state: FSMContext):
    service_name = message.text
    info = services_info.get(service_name)
    await message.reply(info, reply_markup=response_menu)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    await Form.waiting_for_details.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û—Ç–≤–µ—Ç" –∏–ª–∏ "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è"
@dp.message(F.text.in_(["–û—Ç–≤–µ—Ç", "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–¥–æ–ø–ª–∞—Ç–∞ 500 —Ä.)"]))
async def select_format(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–≤–µ—Ç":
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç *–û—Ç–≤–µ—Ç*. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –ú—ã –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞–±–æ—Ç–µ.", reply_markup=main_menu)
    elif message.text == "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–¥–æ–ø–ª–∞—Ç–∞ 500 —Ä.)":
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç *–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=back_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
@dp.message(lambda message: re.match(birth_info_pattern, message.text.strip()))
async def handle_conference_data(message: types.Message):
    match = re.match(birth_info_pattern, message.text.strip())
    time, date, place = match.groups()

    # –ü–æ–ª—É—á–∞–µ–º —Ç—ç–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tag = f"@{message.from_user.username}" if message.from_user.username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}"

    print(time)
    # –ö–ê–†–û–ß–ï –¢–£–¢ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –ù–ê –ü–†–û–í–ï–†–ö–£ –í–†–ï–ú–ï–ù–ò

    data = {

        'date': f'{date[6:]}-{date[3:5]}-{date[:2]}T{time}:00Z'
	}
    resp = {
        'exists': '',
    }
    json_data = json.dumps(data)
    print(json_data)

    header = {
        'Content-Type': 'application/json'
    }
    response = requests.get('http://localhost:8082/checkDate', headers=header, data=json_data)
    exist = response.json().get("exists")
    print(exist)

    if exist == True:
        # await bot.send_message(
        # chat_id=MyID,
        # text=f"üì© –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ!:\n\n"
        # f"{time,}"
        # )
        await message.reply("üì© –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ!:\n\n", reply_markup=main_menu)
    else:
         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, –≤–∫–ª—é—á–∞—è —Ç—ç–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ï–°–õ–ò –í–†–ï–ú–Ø –°–í–û–ë–û–î–ù–û
        await bot.send_message(
        chat_id=MyID,
        text=f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é:\n\n"
             f"–í—Ä–µ–º—è: {time}\n–î–∞—Ç–∞: {date}\n–ú–µ—Å—Ç–æ: {place}\n"
             f"–¢—ç–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_tag}"
             f"{resp}"

        )

        data = {
            'year': int(date[6:]),
            'month': int(date[3:5]),
            'day': int(date[:2]),
            'hours': int(time[:2]),
            'minutes': int(time[3:]),
            'seconds': 0,
            'firstName': "isha",
            'midName': "anov",
            'lastName': "anovic",
            'service': "tarro",
            'online': True
            }
        # resp = {
        #     'exists': '',
        # }
        json_data = json.dumps(data)
        # print(json_data)

        header = {
            'Content-Type': 'application/json'
        }
        response = requests.post('http://localhost:8082/newAppointment', headers=header, data=json_data)
        # exist = response.json().get("exists")
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤.", reply_markup=main_menu)





# –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.reply("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu)


async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
